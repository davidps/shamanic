package io.shamanic.android.db.src_gen;

import java.util.List;
import io.shamanic.android.db.src_gen.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table USER.
 */
public class user {

    private Long id;
    /** Not-null value. */
    private String username;
    /** Not-null value. */
    private String password;
    /** Not-null value. */
    private String fullname;
    private String email;
    private Boolean IsActive;
    private java.util.Date DateJoined;
    private Long userLocationId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient userDao myDao;

    private List<userlocation> userlocationList;

    public user() {
    }

    public user(Long id) {
        this.id = id;
    }

    public user(Long id, String username, String password, String fullname, String email, Boolean IsActive, java.util.Date DateJoined, Long userLocationId) {
        this.id = id;
        this.username = username;
        this.password = password;
        this.fullname = fullname;
        this.email = email;
        this.IsActive = IsActive;
        this.DateJoined = DateJoined;
        this.userLocationId = userLocationId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getUsername() {
        return username;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUsername(String username) {
        this.username = username;
    }

    /** Not-null value. */
    public String getPassword() {
        return password;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPassword(String password) {
        this.password = password;
    }

    /** Not-null value. */
    public String getFullname() {
        return fullname;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFullname(String fullname) {
        this.fullname = fullname;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public Boolean getIsActive() {
        return IsActive;
    }

    public void setIsActive(Boolean IsActive) {
        this.IsActive = IsActive;
    }

    public java.util.Date getDateJoined() {
        return DateJoined;
    }

    public void setDateJoined(java.util.Date DateJoined) {
        this.DateJoined = DateJoined;
    }

    public Long getUserLocationId() {
        return userLocationId;
    }

    public void setUserLocationId(Long userLocationId) {
        this.userLocationId = userLocationId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<userlocation> getUserlocationList() {
        if (userlocationList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            userlocationDao targetDao = daoSession.getUserlocationDao();
            List<userlocation> userlocationListNew = targetDao._queryUser_UserlocationList(id);
            synchronized (this) {
                if(userlocationList == null) {
                    userlocationList = userlocationListNew;
                }
            }
        }
        return userlocationList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetUserlocationList() {
        userlocationList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
