package io.shamanic.android.db.src_gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import io.shamanic.android.db.src_gen.user;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class userDao extends AbstractDao<user, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity user.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property Fullname = new Property(3, String.class, "fullname", false, "FULLNAME");
        public final static Property Email = new Property(4, String.class, "email", false, "EMAIL");
        public final static Property IsActive = new Property(5, Boolean.class, "IsActive", false, "IS_ACTIVE");
        public final static Property DateJoined = new Property(6, java.util.Date.class, "DateJoined", false, "DATE_JOINED");
        public final static Property UserLocationId = new Property(7, Long.class, "userLocationId", false, "USER_LOCATION_ID");
    };

    private DaoSession daoSession;


    public userDao(DaoConfig config) {
        super(config);
    }
    
    public userDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USERNAME' TEXT NOT NULL ," + // 1: username
                "'PASSWORD' TEXT NOT NULL ," + // 2: password
                "'FULLNAME' TEXT NOT NULL ," + // 3: fullname
                "'EMAIL' TEXT," + // 4: email
                "'IS_ACTIVE' INTEGER," + // 5: IsActive
                "'DATE_JOINED' INTEGER," + // 6: DateJoined
                "'USER_LOCATION_ID' INTEGER);"); // 7: userLocationId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, user entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUsername());
        stmt.bindString(3, entity.getPassword());
        stmt.bindString(4, entity.getFullname());
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        Boolean IsActive = entity.getIsActive();
        if (IsActive != null) {
            stmt.bindLong(6, IsActive ? 1l: 0l);
        }
 
        java.util.Date DateJoined = entity.getDateJoined();
        if (DateJoined != null) {
            stmt.bindLong(7, DateJoined.getTime());
        }
 
        Long userLocationId = entity.getUserLocationId();
        if (userLocationId != null) {
            stmt.bindLong(8, userLocationId);
        }
    }

    @Override
    protected void attachEntity(user entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public user readEntity(Cursor cursor, int offset) {
        user entity = new user( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // username
            cursor.getString(offset + 2), // password
            cursor.getString(offset + 3), // fullname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // email
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // IsActive
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // DateJoined
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // userLocationId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, user entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsername(cursor.getString(offset + 1));
        entity.setPassword(cursor.getString(offset + 2));
        entity.setFullname(cursor.getString(offset + 3));
        entity.setEmail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsActive(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setDateJoined(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setUserLocationId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(user entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(user entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
